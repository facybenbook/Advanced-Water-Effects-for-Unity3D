// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel MetaballImpact
#pragma kernel GraduallyDisappear
#pragma kernel GetDensities

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct Node
{
	float3 pos;
	float density;
};

struct Cell
{
	Node nodes[4];
};

float4 metaballPos;
float metaballRadius;
float metaballVelocity;

int gridWidth;
int gridHeight;

RWStructuredBuffer<Node> allNodes;
RWStructuredBuffer<Cell> allCells;

AppendStructuredBuffer<float3> vertices;
AppendStructuredBuffer<int> tris;


void GetDensityForNode(inout Node n)
{
	float otherBit = (metaballRadius - length((n.pos - metaballPos)) * length((n.pos - metaballPos)) );
	otherBit *= otherBit;

	n.density = metaballRadius / otherBit;

	n.density = 2;
}

[numthreads(8,8,1)]
void GetDensities (uint3 id : SV_DispatchThreadID)
{
	int pos = (id.x + gridWidth) + (id.y * gridWidth);

	//GetDensityForNode(inout allNodes[pos]);
}

[numthreads(8,8,1)]
void MetaballImpact (uint3 id : SV_DispatchThreadID)
{
	int pos = (id.x + gridWidth) + (id.y * gridWidth);// + (id.z * gridWidth * gridHeight);

	for(int i=0; i<4; i++)
	{
		GetDensityForNode(allCells[pos].nodes[i]);
	}

	allCells[pos].nodes[0].density = 3.3f;
}

[numthreads(8,8,1)]
void GraduallyDisappear (uint3 id : SV_DispatchThreadID)
{
	int pos = (id.x + gridWidth) + (id.y * gridWidth);// + (id.z * gridWidth * gridHeight);

	//allCells[0].nodes[0].density = 2;
}