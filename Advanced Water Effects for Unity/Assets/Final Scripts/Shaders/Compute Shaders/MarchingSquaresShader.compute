// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GetDensities
#pragma kernel UpdatePhysics

struct Corner
{
	float3 pos;
	float density;
};

struct Cell
{
	Corner myCorners[8];
};


struct Metaball
{
	float3 pos;
	float3 velocity;
	float radius;
};

float deltaTime;
float4 gravity;
float4 movementSinceLastFrame;

RWStructuredBuffer<Cell> allCells;
RWStructuredBuffer<Corner> allCorners;
RWStructuredBuffer<Metaball> allMetaballs;

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<int> triangles;

int numBalls = 100;
int numCorners = 100;

int numTris = 0;

int gridWidth, gridHeight;

void AssignDensityToCorner(inout Corner c, inout RWStructuredBuffer<Metaball> metaballs)
{
	c.density = 0;

	//Loops through each metaball to calculate the metaball density of this corner
	for(int i=0; i<numBalls; i++)
	{
		Metaball m = metaballs[i];

		float distSq = length(c.pos - m.pos);
		distSq = distSq * distSq;

		float newDens = (m.radius * m.radius) / (distSq);
		c.density += newDens;
	}
}

void MoveMetaball(int i)
{
	float gravityIntensity = 0.61f;

	float multiplier = 0.95f;
	float threshold = 0.4f;

	//This performs a density calculation which affects how quickly this particular metaball flows down the surface
	for(int m=0; m<numBalls; m++)
	{
		gravityIntensity -= (length(allMetaballs[i].pos - allMetaballs[m].pos) - threshold) * multiplier;
	}

	//Ensures that a metaball never falls up or falls too quickly
	gravityIntensity = clamp(gravityIntensity, 0.001f, 29.0f);

	//Moves all metaballs based on where the grid is moving in the scene
	allMetaballs[i].pos += movementSinceLastFrame;

	//Applies changes to the velocity, and then applies the velocity to the metaball's position
	allMetaballs[i].velocity += gravity * deltaTime * gravityIntensity;
	allMetaballs[i].pos += allMetaballs[i].velocity * deltaTime;

	//Apply drag
	allMetaballs[i].velocity *= 1 - (deltaTime*6.0f);
}


[numthreads(8,8,1)]
void GetDensities (uint3 id : SV_DispatchThreadID)
{
	int pos = (id.x + gridWidth) + (id.y * gridWidth);	

	//Moves this thread's corner based on where the grid has moved in the scene
	allCorners[pos].pos += movementSinceLastFrame;

	AssignDensityToCorner(allCorners[pos], allMetaballs);
}

[numthreads(8,1,1)]
void UpdatePhysics (uint3 id : SV_DispatchThreadID)
{
	int pos = id.x;

	MoveMetaball(pos);
}
