// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GetDensities

struct Corner
{
	float3 pos;
	float density;
};

struct Cell
{
	Corner myCorners[8];
};


struct Metaball
{
	float3 pos;
	float radius;
};

RWStructuredBuffer<Cell> allCells;
RWStructuredBuffer<Corner> allCorners;
RWStructuredBuffer<Metaball> allMetaballs;

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<int> triangles;

int numBalls = 100;
int numCorners = 100;

int numTris = 0;

int gridWidth, gridHeight, gridDepth;

//Calculates the density of the given corner by looping through all metaballs
void AssignDensityToCorner(inout Corner c, inout RWStructuredBuffer<Metaball> metaballs)
{
	c.density = 0;

	for(int i=0; i<numBalls; i++)
	{
		Metaball m = metaballs[i];

		float temp = (m.radius - length((c.pos - m.pos)) * length((c.pos - m.pos)) );
		temp *= temp;

		c.density += m.radius / temp;
	}
}

//Figures out which corner to work with and then has that corner calculate its density
[numthreads(4,4,4)]
void GetDensities (uint3 id : SV_DispatchThreadID)
{
	int pos = (id.x + gridWidth) + (id.y * gridWidth) + (id.z * gridWidth * gridHeight);	
	AssignDensityToCorner(allCorners[pos], allMetaballs);
}

